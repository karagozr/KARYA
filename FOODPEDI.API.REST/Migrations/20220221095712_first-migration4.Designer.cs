// <auto-generated />
using System;
using FOODPEDI.API.REST.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace FOODPEDI.API.REST.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220221095712_first-migration4")]
    partial class firstmigration4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("FOODPEDI.API.REST.DataAccess.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("OAuthIssuer")
                        .HasColumnType("text");

                    b.Property<string>("OAuthSubject")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("FOODPEDI.API.REST.DataAccess.Entities.Brand", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Description1")
                        .HasColumnType("text");

                    b.Property<string>("Description2")
                        .HasColumnType("text");

                    b.Property<string>("Description3")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Origin")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("FOODPEDI.API.REST.DataAccess.Entities.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreateUser")
                        .HasColumnType("text");

                    b.Property<string>("Description1")
                        .HasColumnType("text");

                    b.Property<string>("Description2")
                        .HasColumnType("text");

                    b.Property<string>("Description3")
                        .HasColumnType("text");

                    b.Property<bool>("HasChild")
                        .HasColumnType("boolean");

                    b.Property<string>("IconFolderPath")
                        .HasColumnType("text");

                    b.Property<string>("IconId1")
                        .HasColumnType("text");

                    b.Property<string>("IconId2")
                        .HasColumnType("text");

                    b.Property<string>("ImageFolderPath")
                        .HasColumnType("text");

                    b.Property<string>("ImageId1")
                        .HasColumnType("text");

                    b.Property<string>("ImageId2")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("ParentId")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("FOODPEDI.API.REST.DataAccess.Entities.Ingredient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("FOODPEDI.API.REST.DataAccess.Entities.Item", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Barcode1")
                        .HasColumnType("text");

                    b.Property<string>("Barcode2")
                        .HasColumnType("text");

                    b.Property<string>("Barcode3")
                        .HasColumnType("text");

                    b.Property<string>("BrandId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreateUser")
                        .HasColumnType("text");

                    b.Property<string>("Description1")
                        .HasColumnType("text");

                    b.Property<string>("Description2")
                        .HasColumnType("text");

                    b.Property<string>("Description3")
                        .HasColumnType("text");

                    b.Property<string>("ImageFolderPath")
                        .HasColumnType("text");

                    b.Property<double>("ItemWeight")
                        .HasColumnType("double precision");

                    b.Property<int?>("MadeCityId")
                        .HasColumnType("integer");

                    b.Property<int?>("MadeCountryId")
                        .HasColumnType("integer");

                    b.Property<int?>("MadeStateId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ShortDescription1")
                        .HasColumnType("text");

                    b.Property<string>("ShortDescription2")
                        .HasColumnType("text");

                    b.Property<string>("ShortDescription3")
                        .HasColumnType("text");

                    b.Property<byte>("State")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdateUser")
                        .HasColumnType("text");

                    b.Property<string>("WebPageUrl1")
                        .HasColumnType("text");

                    b.Property<string>("WebPageUrl2")
                        .HasColumnType("text");

                    b.Property<string>("WebPageUrl3")
                        .HasColumnType("text");

                    b.Property<string>("WebPageUrl4")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("MadeCityId");

                    b.HasIndex("MadeCountryId");

                    b.HasIndex("MadeStateId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("FOODPEDI.API.REST.DataAccess.Entities.ItemCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CategoryId")
                        .HasColumnType("text");

                    b.Property<string>("ItemId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemCategories");
                });

            modelBuilder.Entity("FOODPEDI.API.REST.DataAccess.Entities.ItemCommend", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ItemId")
                        .HasColumnType("text");

                    b.Property<string>("ParentId")
                        .HasColumnType("text");

                    b.Property<int>("Rate")
                        .HasColumnType("integer");

                    b.Property<bool>("ShowUser")
                        .HasColumnType("boolean");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("ParentId");

                    b.HasIndex("UserId");

                    b.ToTable("ItemCommends");
                });

            modelBuilder.Entity("FOODPEDI.API.REST.DataAccess.Entities.ItemImage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("IsMainImage")
                        .HasColumnType("boolean");

                    b.Property<string>("ItemId")
                        .HasColumnType("text");

                    b.Property<short>("OrderNumber")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemImages");
                });

            modelBuilder.Entity("FOODPEDI.API.REST.DataAccess.Entities.ItemIngredient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("IngredientId")
                        .HasColumnType("text");

                    b.Property<string>("ItemId")
                        .HasColumnType("text");

                    b.Property<string>("UnitCode")
                        .HasColumnType("text");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("IngredientId");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemIngredients");
                });

            modelBuilder.Entity("FOODPEDI.API.REST.DataAccess.Entities.MadeCity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("StateId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("MadeCities");
                });

            modelBuilder.Entity("FOODPEDI.API.REST.DataAccess.Entities.MadeCountry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code1")
                        .HasColumnType("text");

                    b.Property<string>("Code2")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PhoneCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MadeCountries");
                });

            modelBuilder.Entity("FOODPEDI.API.REST.DataAccess.Entities.MadeState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CountryId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PhoneCode")
                        .HasColumnType("text");

                    b.Property<string>("PlateCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("MadeStates");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FOODPEDI.API.REST.DataAccess.Entities.Item", b =>
                {
                    b.HasOne("FOODPEDI.API.REST.DataAccess.Entities.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId");

                    b.HasOne("FOODPEDI.API.REST.DataAccess.Entities.MadeCity", "MadeCity")
                        .WithMany()
                        .HasForeignKey("MadeCityId");

                    b.HasOne("FOODPEDI.API.REST.DataAccess.Entities.MadeCountry", "MadeCountry")
                        .WithMany()
                        .HasForeignKey("MadeCountryId");

                    b.HasOne("FOODPEDI.API.REST.DataAccess.Entities.MadeState", "MadeState")
                        .WithMany()
                        .HasForeignKey("MadeStateId");

                    b.Navigation("Brand");

                    b.Navigation("MadeCity");

                    b.Navigation("MadeCountry");

                    b.Navigation("MadeState");
                });

            modelBuilder.Entity("FOODPEDI.API.REST.DataAccess.Entities.ItemCategory", b =>
                {
                    b.HasOne("FOODPEDI.API.REST.DataAccess.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("FOODPEDI.API.REST.DataAccess.Entities.Item", "Item")
                        .WithMany("ItemCategories")
                        .HasForeignKey("ItemId");

                    b.Navigation("Category");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("FOODPEDI.API.REST.DataAccess.Entities.ItemCommend", b =>
                {
                    b.HasOne("FOODPEDI.API.REST.DataAccess.Entities.Item", "Item")
                        .WithMany("ItemCommends")
                        .HasForeignKey("ItemId");

                    b.HasOne("FOODPEDI.API.REST.DataAccess.Entities.ItemCommend", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.HasOne("FOODPEDI.API.REST.DataAccess.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Item");

                    b.Navigation("Parent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FOODPEDI.API.REST.DataAccess.Entities.ItemImage", b =>
                {
                    b.HasOne("FOODPEDI.API.REST.DataAccess.Entities.Item", "Item")
                        .WithMany("ItemImages")
                        .HasForeignKey("ItemId");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("FOODPEDI.API.REST.DataAccess.Entities.ItemIngredient", b =>
                {
                    b.HasOne("FOODPEDI.API.REST.DataAccess.Entities.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId");

                    b.HasOne("FOODPEDI.API.REST.DataAccess.Entities.Item", "Item")
                        .WithMany("ItemIngredients")
                        .HasForeignKey("ItemId");

                    b.Navigation("Ingredient");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("FOODPEDI.API.REST.DataAccess.Entities.MadeCity", b =>
                {
                    b.HasOne("FOODPEDI.API.REST.DataAccess.Entities.MadeState", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.Navigation("State");
                });

            modelBuilder.Entity("FOODPEDI.API.REST.DataAccess.Entities.MadeState", b =>
                {
                    b.HasOne("FOODPEDI.API.REST.DataAccess.Entities.MadeCountry", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FOODPEDI.API.REST.DataAccess.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FOODPEDI.API.REST.DataAccess.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FOODPEDI.API.REST.DataAccess.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FOODPEDI.API.REST.DataAccess.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FOODPEDI.API.REST.DataAccess.Entities.Item", b =>
                {
                    b.Navigation("ItemCategories");

                    b.Navigation("ItemCommends");

                    b.Navigation("ItemImages");

                    b.Navigation("ItemIngredients");
                });
#pragma warning restore 612, 618
        }
    }
}
