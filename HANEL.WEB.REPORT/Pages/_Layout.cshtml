<!DOCTYPE html>

<html>
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>Dashboard Web Application</title>

    <link href="css/site.min.css" rel="stylesheet" />

    <script type="text/javascript">
    function onBeforeRender(dashboardControl) {
        dashboardControl.registerExtension(new DevExpress.Dashboard.DashboardPanelExtension(dashboardControl, { dashboardThumbnail: "./DashboardThumbnail/{0}.png" }));
    }
    </script>
</head>
<body>
    @RenderBody()

    <script type="text/javascript" src="js/site.min.js"></script>
    @*<script type="text/javascript" src="js/saveAsExtension.js"></script>*@
    @*<script type="text/javascript" src="js/deleteExtension.js"></script>*@

    <!-- Defines the "Save As" extension template. -->
    <script type="text/html" id="dx-save-as-form">
        <div>Dashboard Name:</div>
        <div style="margin: 10px 0" data-bind="dxTextBox: { value: newName }"></div>
        <div data-bind="dxButton: { text: 'Save', onClick: saveAs }"></div>
    </script>

    <script type="text/javascript">
        function SaveAsDashboardExtension(dashboardControl) {
            this._dashboardControl = dashboardControl;
            this._menuItem = {
                id: "dashboard-save-as",
                title: "Save As...",
                template: "dx-save-as-form",
                selected: ko.observable(true),
                disabled: ko.computed(function () { return !dashboardControl.dashboard(); }),
                index: 112,
                data: this
            };
            this.newName = ko.observable("New Dashboard Name");
        }

        SaveAsDashboardExtension.prototype.saveAs = function () {
            if (this.isExtensionAvailable()) {
                this._toolbox.menuVisible(false);
                this._newDashboardExtension.performCreateDashboard(this.newName(), this._dashboardControl.dashboard().getJSON());
            }
        };

        SaveAsDashboardExtension.prototype.isExtensionAvailable = function () {
            return this._toolbox !== undefined && this._newDashboardExtension !== undefined;
        }

        SaveAsDashboardExtension.prototype.start = function () {
            this._toolbox = this._dashboardControl.findExtension("toolbox");
            this._newDashboardExtension = this._dashboardControl.findExtension("create-dashboard");

            if (this.isExtensionAvailable())
                this._toolbox.menuItems.push(this._menuItem);
        };

        SaveAsDashboardExtension.prototype.stop = function () {
            if (this.isExtensionAvailable())
                this._toolbox.menuItems.remove(this._menuItem);
        }


        function DeleteDashboardExtension(dashboardControl) {
            this._dashboardControl = dashboardControl;
            this.name = "dxdde-delete-dashboard";
            this._menuItem = {
                id: this.name,
                title: "Delete",
                click: this.deleteDashboard.bind(this),
                selected: ko.observable(false),
                disabled: ko.computed(function () { return !this._dashboardControl.dashboard(); }, this),
                index: 113,
                hasSeparator: true,
                data: this
            };
        }
        DeleteDashboardExtension.prototype.deleteDashboard = function () {
            if (this._toolbox) {
                if (confirm("Delete this Dashboard?")) {
                    var dashboardid = this._dashboardControl.dashboardContainer().id;
                    this._toolbox.menuVisible(false);
                    $.ajax({
                        url: 'Home/DeleteDashboard',
                        data: { DashboardID: dashboardid },
                        type: 'POST',
                        success: (function () { this._dashboardControl.unloadDashboard(); }).bind(this)
                    });
                }
            }
        }
        DeleteDashboardExtension.prototype.start = function () {
            this._toolbox = this._dashboardControl.findExtension('toolbox');
            this._toolbox && this._toolbox.menuItems.push(this._menuItem);
        };
        DeleteDashboardExtension.prototype.stop = function () {
            this._toolbox && this._toolbox.menuItems.remove(this._menuItem);
        };

        function onBeforeRender(sender) {
            var dashboardControl = sender;
            dashboardControl.registerExtension(new SaveAsDashboardExtension(dashboardControl));
            dashboardControl.registerExtension(new DeleteDashboardExtension(dashboardControl));
        }
    </script>
</body>
</html>